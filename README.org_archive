#    -*- mode: org -*-


Archived entries from file /home/dan/.doom.d/README.org


* Emacs X Window Management (EXWM)
:PROPERTIES:
:ARCHIVE_TIME: 2021-05-14 Fri 21:58
:ARCHIVE_FILE: ~/.doom.d/README.org
:ARCHIVE_CATEGORY: README
:END:

I love EXWM, but retreated back to XMonad. I had issues with both Emacs and Firefox causing the main thread to block, which (in EXWM) hangs the entire system.

** About
Pros:

- System-wide UI consistency
  - X windows and Emacs windows are treated the same
    - e.g. Use Ivy to surface Firefox windows with fuzzy search
  - Key simulation allows consistent keybindings (e.g. the copy/paste bindings
    can be made the same between Emacs, browsers, terminals, etc...)
- Interactively update WM configuration
  - Unlike e.g. XMonad, which requires a re-compile + restart
  - Can add new bindings and immediately use them
- No separate WM install + config. It's just Emacs + Elisp.

Cons:
- Need to be careful not to block the main thread! That will lock the entire system.
  - Workaround: just spawn a secondary Emacs within the base Emacs whenever
    there's a risk of blocking.
    - e.g. Before using TRAMP, spawn a fresh Emacs.
- Less stable than XMonad, which is a tiny, well-tested Haskell program
- Limited support for managing multiple screens.
  - It works, but it hardwires each workspace to a specific monitor.
- Need to be careful not to leave your Emacs configuration in a broken state.
  - Fallbacks include other WMs installed (XMonad) or switching to a tty
    (Ctrl-Alt-f#)

** Create the config directory where Doom expects it

#+BEGIN_EXAMPLE sh
mkdir -p ./modules/desktop/exwm
#+END_EXAMPLE

** Package Declarations
#+begin_src emacs-lisp :tangle ./modules/desktop/exwm/packages.el
;; -*- no-byte-compile: t; -*-
;;; desktop/exwm/packages.el
(package! exwm)
;; (package! exwm-firefox
;;   :recipe (:host github :repo "ieure/exwm-firefox"))
;; (package! exwm-mff
;;   :recipe (:host github :repo "ieure/exwm-mff"))
(package! xelb)
(package! exwm-edit)

#+end_src

** EXWM Configuration

#+begin_src emacs-lisp :tangle ./modules/desktop/exwm/config.el
  ;;; desktop/exwm/config.el -*- lexical-binding: t; -*-
(use-package! exwm
  :init
  (setq
   mouse-autoselect-window t
   focus-follows-mouse t)
  :config
  (setq exwm-workspace-number 9))

(defun my/exwm-rename-buffer-to-title () (exwm-workspace-rename-buffer (format "%s - %s" exwm-class-name exwm-title)))
(setq exwm-workspace-show-all-buffers t
      exwm-layout-show-all-buffers t
      exwm-manage-force-tiling t)


(setq exwm-input-prefix-keys '(?\s- ))

(display-battery-mode 1)
(display-time-mode 1)


;; (setq exwm-manage-configurations
;;       '(((string= exwm-class-name "Google-chrome")
;;          workspace 0)
;;         ((string= exwm-class-name "Firefox")
;;          workspace 1)
;;         ((string= exwm-instance-name "terminator")
;;          workspace 8)
;;         ((string= exwm-instance-name "keybase")
;;          workspace 9)))


(defun my/launch (command)
  (interactive (list (read-shell-command "$ ")))
  (start-process-shell-command command nil command))

(defun my/launch-terminal ()
  (interactive)
  (my/launch "terminator"))

(defun my/launch-browser ()
  (interactive)
  (my/launch "firefox"))

(defun my/launch-emacs ()
  (interactive)
  (my/launch "emacs"))

(defun my/lock-screen ()
  (interactive)
  (my/launch "xtrlock -b"))

(defun my/volume-up ()
  (interactive)
  (my/launch "amixer sset Master unmute")
  (my/launch "amixer sset Master 5%+"))

(defun my/volume-down ()
  (interactive)
  (my/launch "amixer sset Master 5%-"))

(setq exwm-workspace-minibuffer-position 'nil)

(exwm-input-set-key (kbd "s-:") #'eval-expression)

;; https://emacs.stackexchange.com/questions/33326/how-do-i-cut-and-paste-effectively-between-applications-while-using-exwm
(defun my/exwm-input-line-mode ()
  "Set exwm window to line-mode and show mode line"
  (call-interactively #'exwm-input-grab-keyboard))

(defun my/exwm-input-char-mode ()
  "Set exwm window to char-mode and hide mode line"
  (call-interactively #'exwm-input-release-keyboard))

(defun my/exwm-input-toggle-mode ()
  "Toggle between line- and char-mode"
  (interactive)
  (with-current-buffer (window-buffer)
    (when (eq major-mode 'exwm-mode)
      (if (equal (second (second mode-line-process)) "line")
          (my/exwm-input-char-mode)
        (my/exwm-input-line-mode)))))

(defun my/toggle-exwm-input-line-mode-passthrough ()
  (interactive)
  (if exwm-input-line-mode-passthrough
      (progn
        (setq exwm-input-line-mode-passthrough nil)
        (message "App receives all the keys now (with some simulation)"))
    (progn
      (setq exwm-input-line-mode-passthrough t)
      (message "emacs receives all the keys now")))
  (force-mode-line-update))

(exwm-input-set-key (kbd "s-;") 'my/toggle-exwm-input-line-mode-passthrough)



;; Switch to last workspace
(defvar my/exwm-workspace-previous-index 0 "The previous active workspace index.")

(defun my/exwm-workspace--current-to-previous-index (_x &optional _y)
  (setq my/exwm-workspace-previous-index exwm-workspace-current-index))

(advice-add 'exwm-workspace-switch :before #'my/exwm-workspace--current-to-previous-index)

(defun my/exwm-workspace-switch-to-previous ()
  (interactive)
  "Switch to the previous active workspace."
  (let ((index my/exwm-workspace-previous-index))
    (exwm-workspace-switch index)))

(defun my/switch-to-last-buffer ()
  "Switch to last open buffer in current window."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

;; Re-use muscle memory from 6 years of an xmonad setup
(exwm-input-set-key (kbd "s-p") #'dmenu)
(exwm-input-set-key (kbd "s-P") #'counsel-linux-app)
(exwm-input-set-key (kbd "s-s") #'password-store-copy)
(exwm-input-set-key (kbd "s-<return>") #'my/launch-terminal)
(exwm-input-set-key (kbd "s-.") #'my/switch-to-last-buffer)
(exwm-input-set-key (kbd "s-,") #'my/exwm-workspace-switch-to-previous)
(exwm-input-set-key (kbd "s-i") #'my/launch-browser)
(exwm-input-set-key (kbd "s-b") 'switch-to-buffer)
(exwm-input-set-key (kbd "s-M-O") #'my/lock-screen)
(exwm-input-set-key (kbd "s-<up>") #'my/volume-up)
(exwm-input-set-key (kbd "s-<down>") #'my/volume-down)
;; (exwm-input-set-key (kbd "s-<print>") #'my/screen-to-clipboard)

(exwm-input-set-key (kbd "s-R") #'doom/reload)
(exwm-input-set-key (kbd "s-Q") #'kill-emacs)

(exwm-input-set-key (kbd "s-m") #'bury-buffer)
(exwm-input-set-key (kbd "s-M") #'unbury-buffer)

(exwm-input-set-key (kbd "s-j") #'other-window)
(exwm-input-set-key (kbd "s-k") #'rev-other-window)

(exwm-input-set-key (kbd "s-J") #'previous-buffer)
(exwm-input-set-key (kbd "s-K") #'next-buffer)

(exwm-input-set-key (kbd "s-h") 'shrink-window)
(exwm-input-set-key (kbd "s-l") 'enlarge-window)
(exwm-input-set-key (kbd "s-H") 'shrink-window-horizontally)
(exwm-input-set-key (kbd "s-L") 'enlarge-window-horizontally)

(exwm-input-set-key (kbd "s-/") 'winner-undo)
(exwm-input-set-key (kbd "s-?") 'winner-redo)

(exwm-input-set-key (kbd "s-'") 'exwm-edit--compose)

(exwm-input-set-key (kbd "s-w") 'delete-window)
(exwm-input-set-key (kbd "s-q") 'kill-this-buffer)

(exwm-input-set-key (kbd "s-C") 'cfw:open-org-calendar)

(exwm-input-set-key (kbd "s-x") 'counsel-M-x)

(exwm-input-set-key (kbd "s-t") 'vterm)

(exwm-input-set-key (kbd "s-<f7>") 'my/monitor-screen-layout)
(exwm-input-set-key (kbd "s-<f8>") 'my/laptop-screen-layout)

(mapcar (lambda (i)
          (exwm-input-set-key (kbd (format "s-%d" i))
                              `(lambda ()
                                 (interactive)
                                 (exwm-workspace-switch-create ,i))))
        (number-sequence 0 9))

;; Configure firefox to open every tab as a new window instead
;; http://p.hagelb.org/exwm-ff-tabs.html
(add-hook 'exwm-manage-finish-hook
          (lambda ()
            ;; these have their own Emacs simulation installed (e.g. Surfingkeys)
            (if (or (string= exwm-class-name "Firefox")
                    (string= exwm-class-name "Google-chrome")
                    (string= exwm-class-name "Atom"))
                (progn
                  (exwm-input-set-local-simulation-keys
                   `(([?\s-w] . [?\C-w])
                     ([?\M-w] . [?\C-c])
                     ([?\C-y] . [?\C-v])
                     ([?\C-w] . [?\C-x])))
                  (exwm-layout-hide-mode-line))
              (exwm-layout-show-mode-line))))

;; (add-hook 'exwm-update-title-hook
;;           (defun my/exwm-title-hook ()
;;             (when (string-match "Firefox" exwm-class-name)
;;               (exwm-workspace-rename-buffer exwm-title))))

(add-hook 'exwm-update-title-hook 'my/exwm-rename-buffer-to-title)

(setq browse-url-firefox-arguments '("-new-window"))

(setq exwm-input-simulation-keys
      '(
        ;; movement
        ([?\C-b] . [left])
        ([?\M-b] . [C-left])
        ([?\C-f] . [right])
        ([?\M-f] . [C-right])
        ([?\C-p] . [up])
        ([?\C-n] . [down])
        ([?\C-e] . [end])
        ([?\M-v] . [prior])
        ([?\C-v] . [next])
        ([?\C-d] . [delete])
        ;; undo
        ([?\C-/] . [?\C-z])

        ;; Interferes with Slack
        ;; ([?\C-k] . [S-end delete])

        ;; cut/copy/paste.
        ([?\C-w] . [?\C-x])
        ([?\M-w] . [?\C-c])
        ([?\C-y] . [?\C-v])
        ;; search
        ([?\C-s] . [?\C-f])))

(define-ibuffer-column exwm-class (:name "Class")
  (if (bound-and-true-p exwm-class-name)
      exwm-class-name
    ""))
(define-ibuffer-column exwm-instance (:name "Instance")
  (if (bound-and-true-p exwm-instance-name)
      exwm-instance-name
    ""))
(define-ibuffer-column exwm-urgent (:name "U")
  (if (bound-and-true-p exwm--hints-urgency)
      "U"
    " "))

(defun my/exwm-ibuffer (&optional other-window)
  (interactive "P")
  (let ((name (buffer-name)))
    (ibuffer other-window
             "*exwm-ibuffer*"
             '((mode . exwm-mode))
             nil nil nil
             '((mark exwm-urgent
                     " "
                     (name 64 64 :left :elide)
                     " "
                     (exwm-class 20 -1 :left)
                     " "
                     (exwm-instance 10 -1 :left))))
    (ignore-errors (ibuffer-jump-to-buffer name))))

(exwm-input-set-key (kbd "s-o") #'my/exwm-ibuffer)

(use-package! exwm-edit
  :init
  ;; Otherwise it steals C-c ' from org
  (setq exwm-edit-bind-default-keys nil))

(defun my/exwm-start-in-char-mode ()
  (when (or (string-prefix-p "terminator" exwm-instance-name)
            (string-prefix-p "emacs" exwm-instance-name)
            (string-prefix-p "next" exwm-instance-name))
    (exwm-input-release-keyboard (exwm--buffer->id (window-buffer)))))
(add-hook 'exwm-manage-finish-hook 'my/exwm-start-in-char-mode)

(require 'exwm-randr)
;; FIXME
(setq exwm-randr-workspace-monitor-plist '(0 "eDP-1"
                                             1 "HDMI-1"
                                             1 "HDMI-1"
                                             2 "HDMI-1"
                                             3 "HDMI-1"
                                             4 "HDMI-1"
                                             5 "HDMI-1"
                                             6 "HDMI-1"
                                             7 "HDMI-1"
                                             8 "HDMI-1"
                                             9 "HDMI-1"))


(require 'exwm-randr)
(exwm-randr-enable)

;; (exwm-enable)

;; (use-package! exwm-mff
;;   :config
;;   (exwm-mff-mode 1))

#+END_SRC

#+RESULTS:

** Launch Script

#+begin_src sh :tangle ./modules/desktop/exwm/launch-exwm.sh :tangle-mode (identity #o775)
#!/bin/bash

# Disable access control for the current user.
xhost +SI:localuser:$USER

# Identify the home of our gtkrc file, important for setting styles of
# gtk-based applications
export GTK2_RC_FILES="$HOME/.gtkrc-2.0"


# Make Java applications aware this is a non-reparenting window manager.
export _JAVA_AWT_WM_NONREPARENTING=1

# Bind caps to ctrl
setxkbmap -option 'ctrl:nocaps'

# set keyboard rate
xset r rate 160 50

xsetroot -solid black

# Set default cursor.
xsetroot -cursor_name left_ptr

# Nix + direnv
# lorri daemon &

# Email sync
offlineimap &

# Uncomment the following block to use the exwm-xim module.
# export XMODIFIERS=@im=exwm-xim
# export GTK_IM_MODULE=xim
# export QT_IM_MODULE=xim
# export CLUTTER_IM_MODULE=xim

source ~/.profile

# Sync Doom
# ~/.emacs.d/bin/doom sync

# Finally start Emacs
exec ~/.emacs.d/bin/doom run
#+end_src

** XSession Configuration

This gets picked up by DM

#+begin_src conf :tangle "/sudo::/usr/share/xsessions/exwm.desktop" :tangle-mode (identity #o644)
[Desktop Entry]
Encoding=UTF-8
Name=EXWM
Comment=Emacs X WM
Exec=/home/dan/.doom.d/modules/desktop/exwm/launch-exwm.sh
Type=XSession
#+end_src

* Deft: Note search
:PROPERTIES:
:ID:       69587a08-56f4-49a9-b040-0394d5524487
:ARCHIVE_TIME: 2021-08-04 Wed 14:32
:ARCHIVE_FILE: ~/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Org/org-roam: Graph layer on top of Org
:ARCHIVE_CATEGORY: README
:END:

#+begin_src emacs-lisp
;; Helpful command: (deft-refresh)
(setq deft-recursive t
      ;; Otherwise too slow
      deft-file-limit 100)

(map! "<f8>" 'my/deft)
(defun my/deft ()
  (interactive)
  (let ((deft-directory org-roam-directory))
    (deft)))
#+end_src

#+RESULTS:
: 100


* org-roam-server: Graph visualization / navigation
:PROPERTIES:
:ID:       6e670688-8f77-4b7e-9baa-2eb4889a5972
:ARCHIVE_TIME: 2021-08-04 Wed 14:32
:ARCHIVE_FILE: ~/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Org/org-roam: Graph layer on top of Org
:ARCHIVE_CATEGORY: README
:END:

#+begin_src emacs-lisp
(use-package! org-roam-server
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8081
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+end_src


* org-journal: Managing daily journal files
:PROPERTIES:
:ID:       49793723-4ced-45f7-bd4a-26ce616efe53
:ARCHIVE_TIME: 2021-08-10 Tue 20:45
:ARCHIVE_FILE: ~/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Org
:ARCHIVE_CATEGORY: README
:END:

#+BEGIN_SRC emacs-lisp
(use-package! org-journal
  :after org
  :config
  (customize-set-variable 'org-journal-dir (concat org-roam-directory "journal"))
  (customize-set-variable 'org-journal-file-format "private-%Y-%m-%d.org")
  (customize-set-variable 'org-journal-date-prefix "#+TITLE: ")
  (customize-set-variable 'org-journal-time-prefix "* ")
  (customize-set-variable 'org-journal-time-format "")
  (customize-set-variable 'org-journal-carryover-items "TODO=\"TODO\"")
  (customize-set-variable 'org-journal-date-format "%Y-%m-%d")
  (map! :leader
        (:prefix-map ("n" . "notes")
         (:prefix ("j" . "journal")
          :desc "Today" "t" #'org-journal-today)))
  (defun org-journal-today ()
    (interactive)
    (org-journal-new-entry t)))

#+END_SRC


* wgrep
:PROPERTIES:
:ID:       499bd407-ced9-4184-971d-80f87f496074
:ARCHIVE_TIME: 2021-08-12 Thu 09:38
:ARCHIVE_FILE: ~/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration
:ARCHIVE_CATEGORY: README
:END:

Replaced by deadgrep-edit-mode

#+begin_src emacs-lisp
(use-package! wgrep
  :config
  (autoload 'wgrep-deadgrep-setup "wgrep-deadgrep")
  (add-hook 'deadgrep-finished-hook 'wgrep-deadgrep-setup))
#+end_src


* Old
:PROPERTIES:
:ID:       9dc40ef1-1f13-4558-b630-3529b10fd0a0
:ARCHIVE_TIME: 2021-09-11 Sat 15:17
:ARCHIVE_FILE: ~/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Rust/Org-babel setup
:ARCHIVE_CATEGORY: README
:END:
#+begin_src emacs-lisp
(use-package! ob-rust)
#+end_src

=cargo-script= required for org-babel blocks (otherwise each requires a =main= function)

#+begin_example sh
cargo install cargo-script
#+end_example



* Performance Tweaks
:PROPERTIES:
:ARCHIVE_TIME: 2021-10-13 Wed 17:23
:ARCHIVE_FILE: ~/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration
:ARCHIVE_CATEGORY: README
:END:

** Swiper
:PROPERTIES:
:ID:       00108066-21b8-4f67-b934-5eb32ec70aa2
:END:

Seems like a good solution to swiper being slow is to [[https://oremacs.com/2019/04/07/swiper-isearch/][just use swiper-isearch]], but I find swiper's handling of multiple results on a line more convenient most of the time.

Instead, I follow advice from [[https://www.reddit.com/r/emacs/comments/cfdv1y/swiper_is_extreamly_slow/euamwwt?utm_source=share&utm_medium=web2x][this Reddit comment]] to make swiper ignore visual line mode. Seems to help for now.

#+begin_src emacs-lisp
(setq swiper-use-visual-line nil)
(setq swiper-use-visual-line-p (lambda (a) nil))
#+end_src


* Ivy
:PROPERTIES:
:ID:       a97d18d1-59c2-46dd-bd73-b2ba61308451
:ARCHIVE_TIME: 2021-10-13 Wed 17:23
:ARCHIVE_FILE: ~/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration
:ARCHIVE_CATEGORY: README
:END:

Ivy allows you to find the input to a command by incrementally searching the
space of all valid inputs. It's well-supported in Doom.

#+BEGIN_SRC emacs-lisp
(after! ivy
  ;; Causes open buffers and recentf to be combined in ivy-switch-buffer
  (setq ivy-use-virtual-buffers t
        counsel-find-file-at-point t
        ivy-wrap nil
        ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center))
        ivy-posframe-height-alist '((t . 20))
        ivy-posframe-parameters '((internal-border-width . 1))
        ivy-posframe-width 100)
  (add-hook 'eshell-mode-hook
            (lambda ()
              (eshell-cmpl-initialize)
              (define-key eshell-mode-map (kbd "M-r") 'counsel-esh-history)))
  (add-to-dk-keymap
   '(("g" . +ivy/project-search)
     ("h" . +ivy/projectile-find-file)
     ("i" . counsel-semantic-or-imenu)
     ("j" . ivy-switch-buffer))))

#+END_SRC


* Debugging
:PROPERTIES:
:ARCHIVE_TIME: 2021-10-13 Wed 17:23
:ARCHIVE_FILE: ~/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration
:ARCHIVE_CATEGORY: README
:END:

#+begin_src emacs-lisp
(use-package! dap-mode
  :config
  ;; (dap-ui-mode)
  ;; (dap-ui-controls-mode 1)

  (require 'dap-lldb)
  (require 'dap-gdb-lldb)
  ;; installs .extension/vscode
  (dap-gdb-lldb-setup)
  (dap-register-debug-template
   "Rust::LLDB Run Configuration"
   (list :type "lldb"
         :request "launch"
         :name "LLDB::Run"
	 :gdbpath "rust-lldb"
         :target nil
         :cwd nil)))
#+end_src

** For Rust

Had to build =lldb= from source to get =lldb-mi=. Required installing =lldb= and =liblldb-dev= to build.

Hit when debugin with =char= types: [[https://github.com/rust-lang/rust/issues/29154][rust-lang/rust#29154 Floating point exception when debugging with lldb on Mac...]]

#+begin_example
undefinederror: need to add support for DW_TAG_base_type 'char' encoded with DW_ATE = 0x8, bit_size = 32
#+end_example


Also, breaks swiper :(


* Poly Markdown
:PROPERTIES:
:ARCHIVE_TIME: 2021-10-13 Wed 17:23
:ARCHIVE_FILE: ~/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration
:ARCHIVE_CATEGORY: README
:END:

Used with *.jmd literate Julia files (see [[http://weavejl.mpastell.com/stable/#Weave.jl-Scientific-Reports-Using-Julia-1][Weave.jl]])

#+begin_src emacs-lisp
(use-package! poly-markdown)
#+end_src


* Additional Web Dev Tooling
:PROPERTIES:
:ID:       0df85fc1-cd60-42f1-9604-1eff5050ced2
:ARCHIVE_TIME: 2021-10-13 Wed 17:23
:ARCHIVE_FILE: ~/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration
:ARCHIVE_CATEGORY: README
:END:

Including the Doom =javascript= module does most of the work...

#+begin_src emacs-lisp
(use-package! jest
  :hook
  (typescript-mode . jest-minor-mode))
#+end_src


* Better Org Babel
:PROPERTIES:
:ARCHIVE_TIME: 2022-07-13 Wed 16:11
:ARCHIVE_FILE: ~/Sync/home/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Org
:ARCHIVE_CATEGORY: README
:END:
** Fast Block Insertion
:PROPERTIES:
:ID:       b9dd4ca5-ac53-4016-96bc-d3aeed770e48
:END:

#+begin_src emacs-lisp
(use-package! company-org-block
  :custom
  (company-org-block-edit-style 'inline) ;; 'auto, 'prompt, or 'inline
  :hook ((org-mode . (lambda ()
                       (setq-local company-backends '(company-org-block))
                       (company-mode +1)))))
#+end_src

* Custom rustic-org-babel
:PROPERTIES:
:ID:       377acdc5-6a98-43b2-8321-7362972b9742
:ARCHIVE_TIME: 2022-07-23 Sa 11:57
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Rust/Org-babel setup
:ARCHIVE_CATEGORY: README
:END:

[[file:~/.emacs.d/.local/straight/repos/rustic/rustic-orb-babel.el][file:~/.emacs.d/.local/straight/repos/rustic/rustic-orb-babel.el]]

Added to [[file:~/.emacs.d/.local/straight/repos/rustic/rustic.el::(when rustic-load-optional-libraries][Rustic optional lib load]]

#+begin_src emacs-lisp
(customize-set-variable 'rustic-babel-display-compilation-buffer t)
(add-to-list 'org-structure-template-alist '("or" . "src org-rust"))
(customize-set-variable 'rustic-babel-format-src-block t)
#+end_src

#+RESULTS:
: t


* COMMENT EVCXR Mode
:PROPERTIES:
:ID:       0164b6a8-15df-4036-a5e6-443040e4f963
:ARCHIVE_TIME: 2022-07-23 Sa 11:57
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Rust/Org-babel setup
:ARCHIVE_CATEGORY: README
:END:

#+begin_src emacs-lisp
(use-package! evcxr
  :hook (rustic-mode-hook . evcxr-minor-mode))
#+end_src


* Org-babel setup
:PROPERTIES:
:ID:       3c1fb6c5-243a-4718-b4f6-883468cc898f
:ARCHIVE_TIME: 2022-07-23 Sa 11:57
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Rust
:ARCHIVE_CATEGORY: README
:END:


* Remote
:PROPERTIES:
:ARCHIVE_TIME: 2022-07-23 Sa 11:57
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Rust/COMMENT Language Server/Over TRAMP
:ARCHIVE_CATEGORY: README
:END:
#+begin_src emacs-lisp
(defun my/register-remote-rust-analyzer ()
  (interactive)
  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-tramp-connection "rust-analyzer")
    ;; (lsp-tramp-connection
    ;;  (lambda ()
    ;;    `(,(or (executable-find
    ;;            (cl-first lsp-rust-analyzer-server-command))
    ;;           (lsp-package-path 'rust-analyzer)
    ;;           "rust-analyzer")
    ;;      ,@(cl-rest lsp-rust-analyzer-server-args))))
    :remote? t
    :major-modes '(rust-mode rustic-mode)
    :initialization-options 'lsp-rust-analyzer--make-init-options
    :notification-handlers (ht<-alist lsp-rust-notification-handlers)
    :action-handlers (ht ("rust-analyzer.runSingle" #'lsp-rust--analyzer-run-single))
    :library-folders-fn (lambda (_workspace) lsp-rust-library-directories)
    :after-open-fn (lambda ()
                     (when lsp-rust-analyzer-server-display-inlay-hints
                       (lsp-rust-analyzer-inlay-hints-mode)))
    :ignore-messages nil
    :server-id 'rust-analyzer-remote)))
#+end_src

#+RESULTS:
: (standard-value (nil) custom-type hook custom-package-version (lsp-mode . 7.0.1) variable-documentation Hooks to run after `rust-analyzer-remote' server is run. custom-requests nil)


* Over TRAMP
:PROPERTIES:
:ID:       c8b5cd73-81fd-4f01-9bc2-ebbdfc55f168
:ARCHIVE_TIME: 2022-07-26 Di 22:15
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Rust/COMMENT Language Server
:ARCHIVE_CATEGORY: README
:END:

[[https://github.com/brotzeit/rustic#lsp--tramp][GitHub - brotzeit/rustic: Rust development environment for Emacs]]

#+begin_src emacs-lisp
(defun start-file-process-shell-command@around (start-file-process-shell-command name buffer &rest args)
  "Start a program in a subprocess.  Return the process object for it. Similar to `start-process-shell-command', but calls `start-file-process'."
  ;; On remote hosts, the local `shell-file-name' might be useless.
  (let ((command (mapconcat 'identity args " ")))
    (funcall start-file-process-shell-command name buffer command)))

(advice-add 'start-file-process-shell-command :around #'start-file-process-shell-command@around)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
(with-eval-after-load "lsp-rust"
  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-tramp-connection "rust-analyzer")
    :remote? t
    :major-modes '(rust-mode rustic-mode)
    :initialization-options 'lsp-rust-analyzer--make-init-options
    :notification-handlers (ht<-alist lsp-rust-notification-handlers)
    :action-handlers (ht ("rust-analyzer.runSingle" #'lsp-rust--analyzer-run-single))
    :library-folders-fn (lambda (_workspace) lsp-rust-library-directories)
    :after-open-fn (lambda ()
                     (when lsp-rust-analyzer-server-display-inlay-hints
                       (lsp-rust-analyzer-inlay-hints-mode)))
    :ignore-messages nil
    :server-id 'rust-analyzer-remote)))
#+end_src

