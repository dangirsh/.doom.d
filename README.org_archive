#    -*- mode: org -*-


Archived entries from file /home/dan/repos/.doom.d/README.org


* Rustic
:PROPERTIES:
:ID:       45aa37f9-6fbf-4111-bb66-90d490f5f405
:ARCHIVE_TIME: 2024-03-29 Fr 18:28
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Only check/lint on host target arch
:ARCHIVE_CATEGORY: README
:END:

Config thanks to: [[https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/][Configuring Emacs for Rust development | Robert Krahn]]

#+begin_src emacs-lisp
(setq rustic-lsp-client 'eglot)

(after! rustic
  (map! :map rustic-mode-map
        "M-j" #'lsp-ui-imenu
        "M-?" #'lsp-find-references
        "C-c C-c C-c" #'rustic-compile
        "C-c C-c l" #'flycheck-list-errors
        "C-c C-c a" #'lsp-execute-code-action
        "C-c C-c r" #'lsp-rename
        "C-c C-c q" #'lsp-workspace-restart
        "C-c C-c Q" #'lsp-workspace-shutdown
        "C-c C-c s" #'lsp-rust-analyzer-status)
  ;; (setq lsp-enable-symbol-highlighting nil)
  (setq rustic-format-trigger nil)

  (add-hook 'rustic-mode-hook 'my/rustic-mode-hook)
  ;; (setq lsp-rust-analyzer-server-display-inlay-hints nil)
  ;; (customize-set-variable 'lsp-ui-doc-enable nil)
  ;; (add-hook 'lsp-ui-mode-hook #'(lambda () (lsp-ui-sideline-enable nil)))
  )

(after! eglot
  (eglot-inlay-hints-mode nil)
  (add-hook 'eglot--managed-mode-hook (lambda () (flymake-mode -1))))


(defun my/rustic-mode-hook ()
  ;; so that run C-c C-c C-r works without having to confirm, but don't try to
  ;; save rust buffers that are not file visiting. Once
  ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
  ;; no longer be necessary.
  (when buffer-file-name
    (setq-local buffer-save-without-query t)))


#+end_src


#+RESULTS:
: my/rustic-mode-hook

** Other deps

- cargo-edit


* COMMENT Language Server
:PROPERTIES:
:ARCHIVE_TIME: 2024-03-29 Fr 19:29
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Rust
:ARCHIVE_CATEGORY: README
:END:

#+begin_example sh :results verbatim
sudo curl -L https://github.com/rust-analyzer/rust-analyzer/releases/latest/download/rust-analyzer-linux -o /usr/local/bin/rust-analyzer
sudo chmod +x /usr/local/bin/rust-analyzer
#+end_example


* Selectrum etc...
:PROPERTIES:
:ID:       2b685615-6622-41ab-aa27-13f9ccfdaca1
:ARCHIVE_TIME: 2024-05-03 Fr 17:03
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration
:ARCHIVE_CATEGORY: README
:END:

[[https://dev.arcology.garden/cce/selectrum.html][Selectrum, etc]]

#+begin_src emacs-lisp
(use-package! selectrum
  :config
  (selectrum-mode +1)
  (setq selectrum-max-window-height 15)
  (setq selectrum-fix-vertical-window-height t)
  (setq selectrum-group-format nil)
  (setq magit-completing-read-function #'selectrum-completing-read))

(use-package! orderless
  :custom (completion-styles '(orderless)))

(use-package! selectrum-prescient
  :after (selectrum)
  :config
  (setq selectrum-prescient-enable-filtering nil)
  (selectrum-prescient-mode +1)
  (prescient-persist-mode +1))

(use-package! ctrlf
  :init
  (ctrlf-mode +1))
#+end_src

** Consult
:PROPERTIES:
:ID:       21b80d84-22d0-4c51-bd9b-df794f575eb9
:END:

#+begin_src emacs-lisp
(use-package! consult
  :init
  (setq xref-search-program 'ripgrep
        xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  (map! :localleader
        :map org-mode-map
        ;; override default binding for org-goto
        "." 'consult-outline)
  :config
  (setq consult-async-split-style 'nil)
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root)
  (setq consult-ripgrep-command "rg --null --ignore-case --line-buffered --color=ansi --max-columns=1000   --no-heading --line-number . -e ARG OPTS")
  :bind
  (;; C-c bindings (mode-specific-map)
   ("M-g M-g" . consult-goto-line) ;; orig. goto-line
   ("M-g m" . consult-mark)
   ("M-g k" . consult-global-mark)
   ("M-s l" . consult-line)
   ("M-s m" . consult-multi-occur)
   ("M-s k" . consult-keep-lines)
   ("M-s u" . consult-focus-lines)
   ;; Isearch integration
   ("M-s e" . consult-isearch)
   :map isearch-mode-map
   ("M-s e" . consult-isearch) ;; orig. isearch-edit-string
   ("M-s l" . consult-line))   ;; needed by consult-line to detect isearch
  )

(use-package! consult-flycheck
  :bind (:map flycheck-command-map
              ("!" . consult-flycheck)))

(use-package! consult-projectile)

;; (consult-customize
;;  consult-ripgrep consult-git-grep consult-grep
;;  consult-bookmark consult-recent-file consult-xref
;;  consult--source-bookmark consult--source-recent-file
;;  consult--source-project-recent-file
;;  ;; :preview-key '(:debounce 0.2 any) ;; Option 1: Delay preview
;;  :preview-key "M-.")

;; (consult-customize
;;  consult--source-file consult--source-project-file consult--source-bookmark
;;  :preview-key "M-.")

(add-to-dk-keymap
 '(("<SPC>" . deadgrep)
   ;; Project content search. ripgrep automatically understands .gitignore
   ("g" . consult-ripgrep)
   ;; Project file search.
   ("h" . consult-projectile)
   ("i" . consult-imenu)
   ("j" . consult-buffer)))

(global-set-key [remap yank-pop] 'consult-yank-pop)
#+end_src

** Marginalia
:PROPERTIES:
:ID:       9a897aa0-c81c-4287-b486-25ea661c2fac
:END:

#+begin_src emacs-lisp
(use-package! marginalia
  :init (marginalia-mode)
  :bind
  (("M-A" . marginalia-cycle)
   :map minibuffer-local-map
   ("M-A" . marginalia-cycle)))
#+end_src


* Selectrum
:PROPERTIES:
:ARCHIVE_TIME: 2024-05-03 Fr 17:08
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Selection, Completion, Search
:ARCHIVE_CATEGORY: README
:END:
#+begin_src emacs-lisp
(use-package! selectrum
  :config
  (selectrum-mode +1)
  (setq selectrum-max-window-height 15)
  (setq selectrum-fix-vertical-window-height t)
  (setq selectrum-group-format nil)
  (setq magit-completing-read-function #'selectrum-completing-read))
#+end_src

** Prescient

#+begin_src emacs-lisp
(use-package! selectrum-prescient
  :after (selectrum)
  :config
  (setq selectrum-prescient-enable-filtering nil)
  (selectrum-prescient-mode +1)
  (prescient-persist-mode +1))
#+end_src


* Orderless
:PROPERTIES:
:ARCHIVE_TIME: 2024-05-03 Fr 17:14
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Selection, Completion, Search
:ARCHIVE_CATEGORY: README
:END:
#+begin_src emacs-lisp
(use-package! orderless
  :custom (completion-styles '(orderless)))
#+end_src


* Marginalia
:PROPERTIES:
:ID:       9a897aa0-c81c-4287-b486-25ea661c2fac
:ARCHIVE_TIME: 2024-05-03 Fr 17:14
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Selection, Completion, Search
:ARCHIVE_CATEGORY: README
:END:

#+begin_src emacs-lisp
(use-package! marginalia
  :init (marginalia-mode)
  :bind
  (("M-A" . marginalia-cycle)
   :map minibuffer-local-map
   ("M-A" . marginalia-cycle)))
#+end_src


* Display Brightness
:PROPERTIES:
:ID:       a704c311-cb1c-4b0d-aacb-f368a1af0600
:ARCHIVE_TIME: 2024-05-22 Mi 19:45
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Hardware Settings
:ARCHIVE_CATEGORY: README
:END:

Set brightness by writing directly to system brightness file.

#+begin_src emacs-lisp
(setq my/brightness-min 1)
(setq my/brightness-max 100)
(setq my/brightness-step 5)

(defun my/get-brightness ()
  (* my/brightness-step (round (string-to-number
                                (shell-command-to-string "light -G"))
                               my/brightness-step)))

(defun my/set-brightness (level)
  (interactive "nBrightness level: ")
  (let ((safe-level
         (cond ((< level my/brightness-min) my/brightness-min)
               ((> level my/brightness-max) my/brightness-max)
               (t level))))
    (save-window-excursion
      (shell-command
       (format "sudo light -S %s" safe-level) nil nil))))

(defun my/brightness-step-change (delta)
  (my/set-brightness (+ delta (my/get-brightness))))

(defun my/brightness-increase ()
  (interactive)
  (my/brightness-step-change my/brightness-step))

(defun my/brightness-decrease ()
  (interactive)
  (my/brightness-step-change (- my/brightness-step)))
#+end_src

* COMMENT org-roam-ui
:PROPERTIES:
:ID:       55b7e312-f076-4d23-bf5d-bbb885aa4fee
:ARCHIVE_TIME: 2024-05-22 Mi 19:49
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Org/org-roam: Graph layer on top of Org
:ARCHIVE_CATEGORY: README
:END:

#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src


* COMMENT Search via consult
:PROPERTIES:
:ID:       17a22bb8-b3e9-4503-823a-94b9828b7f4f
:ARCHIVE_TIME: 2024-05-22 Mi 19:49
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Org/org-roam: Graph layer on top of Org
:ARCHIVE_CATEGORY: README
:END:

https://org-roam.discourse.group/t/using-consult-ripgrep-with-org-roam-for-searching-notes/1226

#+begin_src emacs-lisp
(defun my/org-dir-search (dir)
  "Search an org directory using consult-ripgrep. With live-preview."
  (let ((consult-ripgrep-command "rg --null --ignore-case --type org --line-buffered --color=always --max-columns=1000 --no-heading --line-number . -e ARG OPTS"))
    (consult-ripgrep dir)))

(map! "<f8>" #'(lambda () (interactive) (my/org-dir-search "/home/dan/Sync/org-roam-old")))
#+end_src

#+RESULTS:


* COMMENT org-roam-bibtex: Manage PDFs, notes, & citations.
:PROPERTIES:
:ID:       9c4090a3-3687-449c-b8a3-c0c32e42cf48
:ARCHIVE_TIME: 2024-05-22 Mi 19:49
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Org/org-roam: Graph layer on top of Org
:ARCHIVE_CATEGORY: README
:END:

#+begin_src emacs-lisp
(use-package! org-roam-bibtex
  :after org-roam
  ;; :hook (org-roam-mode . org-roam-bibtex-mode)
  :bind (:map org-mode-map
         (("C-c n a" . orb-note-actions)))
  :config
  (setq bibtex-completion-library-path "~/Sync/pdf/")
  (setq orb-preformat-keywords
        '(("citekey" . "=key=") "title" "url" "file" "author-or-editor" "keywords"))
  ;; (setq orb-note-actions-interface 'ivy)
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "${citekey}"
           :head "#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}

- tags ::

,* ${title}
:PROPERTIES:
:Custom_ID: ${citekey}
:URL: ${url}
:AUTHOR: ${author-or-editor}
:NOTER_DOCUMENT: %(orb-process-file-field \"${citekey}\")
:NOTER_PAGE:
:END:"))))

(unpin! org-roam company-org-roam)
#+end_src

#+RESULTS:
: orb-note-actions


* COMMENT org-noter: Syncing notes to PDFs
:PROPERTIES:
:ID:       5a6bff7b-1b4b-4703-9646-115b5c247d4b
:ARCHIVE_TIME: 2024-05-22 Mi 19:51
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Org
:ARCHIVE_CATEGORY: README
:END:

#+BEGIN_SRC emacs-lisp
(use-package! org-noter
  :after org
  :config
  ;; helpful in EXWM, where there are no frames
  (customize-set-variable 'org-noter-always-create-frame t)
  (customize-set-variable 'org-noter-notes-window-behavior '(start))
  (customize-set-variable 'org-noter-notes-window-location 'horizontal-split)
  (setq org-noter-notes-window-location 'other-frame
        org-noter-notes-search-path '("~/Sync")
        org-noter-auto-save-last-location t
        org-noter-default-notes-file-names '("~/Sync/pdf_notes.org"))
#+END_SRC


* COMMENT org-download: Inserting images into org-mode
:PROPERTIES:
:ID:       2e4bd258-5b1a-4ab0-88b0-68ff84dbaef2
:ARCHIVE_TIME: 2024-05-22 Mi 19:51
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Org
:ARCHIVE_CATEGORY: README
:END:

#+begin_src emacs-lisp
(use-package! org-download
  :config
  ;; take an image that is already on the clipboard
  (customize-set-variable 'org-download-screenshot-method "xclip -selection clipboard -t image/png -o > %s"))
#+end_src


* COMMENT Another image insertion scheme
:PROPERTIES:
:ARCHIVE_TIME: 2024-05-22 Mi 19:52
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Org
:ARCHIVE_CATEGORY: README
:END:

#+begin_src emacs-lisp
(defun my/org-insert-image ()
  "Select and insert an image at point."
  (interactive)
  (let* ((file-name (format "%s.png" (cl-random (expt 2 31))))
         (path (format "%s%s/%s" org-directory "images" file-name)))
    (let ((maim-exit (call-process "maim" nil nil nil "-s" path)))
      (when (= maim-exit 0)
        (insert (format "[[%s]]" path))))))
#+end_src

#+RESULTS:
: my/org-insert-image

[[/home/dan/Sync/images/638692214.png]]


* Copilot
:PROPERTIES:
:ARCHIVE_TIME: 2024-05-22 Mi 19:54
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Effective Editing/LLMs
:ARCHIVE_CATEGORY: README
:END:

#+begin_src emacs-lisp
;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))
#+end_src


* COMMENT Only check/lint on host target arch
:PROPERTIES:
:ID:       4db4d556-d6a1-4819-8d8a-6c2d9cfb985d
:ARCHIVE_TIME: 2024-05-22 Mi 19:55
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_OLPATH: Package Configuration/Rust
:ARCHIVE_CATEGORY: README
:END:

#+begin_src emacs-lisp
(after! rustic-flycheck
  (customize-set-variable 'rustic-flycheck-clippy-params-stable
                          (concat rustic-flycheck-clippy-params-stable " --target x86_64-unknown-linux-gnu"))
  (add-to-list 'flycheck-checkers 'rustic-clippy)
  (delete 'rust-clippy flycheck-checkers)
  (delete 'rust-cargo flycheck-checkers)
  (delete 'rust flycheck-checkers))

(after! lsp-rust
  (setq lsp-rust-analyzer-cargo-watch-command "check"))
#+end_src


#+RESULTS:
: clippy


* Neurosys Module
:PROPERTIES:
:header-args: :tangle ./modules/personal/neurosys/config.el
:ARCHIVE_TIME: 2024-05-22 Mi 20:01
:ARCHIVE_FILE: /home/dan/repos/.doom.d/README.org
:ARCHIVE_CATEGORY: README
:END:

Elisp related to my [[nerusos][neurosys]].

** Globals
:PROPERTIES:
:ID:       bb40fc42-2490-4e1a-9df0-67b136961929
:END:

#+begin_src emacs-lisp
(setq neurosys/base-dir "/home/dan/repos/neurosys/")
#+end_src

** Helpers

*** Deployment
:PROPERTIES:
:ID:       9a02b747-e5a1-44e0-a18c-a7f80c73a7e3
:END:

#+begin_src emacs-lisp
(defun neurosys/deploy-to-host (host host-home-raw)
  (interactive "sHost: \nsHost home: ")
  (let ((host-root (format "/ssh:%s:/" host))
        ;; mind the trailing slash, since we're passing it to rsync
        (host-home (file-name-as-directory host-home-raw)))
    (save-window-excursion
      (org-babel-tangle)
      (my/run-in-fresh-compilation
       (format (concat neurosys/base-dir "rsync.sh %s %s") host host-home) neurosys/base-dir)
      ;; TODO: Is there cleaner way to compile over TRAMP?
      (find-file host-root)
      (compile "nixos-rebuild switch --show-trace")))
  (switch-to-buffer-other-window "*compilation*"))

(defun neurosys/deploy-to-nixos-dev ()
  (interactive)
  (neurosys/deploy-to-host "root@nixos-dev" "/home/dan/"))
#+end_src

*** TODO Upgrading [0/2]

- [ ] Update channels with =nix-channel --update=
- [ ] Rebuild packages with =nixos-rebuild switch=

NOTE: These can be combined with =nixos-rebuild switch --update=

*** Misc
:PROPERTIES:
:ID:       8554032f-9167-4b4e-a0ae-0e57c32a1b69
:END:

#+begin_src emacs-lisp
(defun neurosys/open-config-file ()
  (interactive)
  (find-file (concat neurosys/base-dir "README.org")))
#+end_src

** Keybindings
:PROPERTIES:
:ID:       22c0e92b-37d1-4851-9cb6-2fba931b048a
:END:

#+begin_src emacs-lisp
(map!
 :leader
 :prefix ("j" . "neurosys")
 :desc "deploy" "D" #'neurosys/deploy-to-host
 :desc "deploy to nixos-dev" "d" #'neurosys/deploy-to-nixos-dev)
#+end_src

